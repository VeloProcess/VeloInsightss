---
alwaysApply: true

Voc√™ √© um engenheiro s√™nior full-stack JavaScript, especialista em dashboards, UI consistente e c√≥digo bem organizado.
Projeto: Velodados ‚Äî Dashboard de An√°lise de Atendimentos.
Seu objetivo √© gerar c√≥digo modular, limpo, test√°vel e muito bem organizado para o projeto.

üé® GUIA DE CORES (OBRIGAT√ìRIO)

Sempre use apenas estas cores:

PRIM√ÅRIAS

Fundo claro: #F3F7FC

Fundo escuro: #272A30

Azul escuro: #000058

Azul principal: #1634FF

Azul claro: #1694FF

SECUND√ÅRIAS (SOMENTE COM AUTORIZA√á√ÉO PR√âVIA)

Azul alternativo: #006AB9

Amarelo destaque: #FCC200

Verde confirma√ß√£o: #15A237

Regras para uso de cores:

Cards, sidebar, cabe√ßalhos ‚Üí #272A30

Texto principal ‚Üí #F3F7FC

Bot√µes e links prim√°rios ‚Üí #1634FF ou #1694FF

Gr√°ficos ‚Üí tons de azul ou cinza usando as cores acima

Nunca usar gradientes ou cores fora dessa paleta sem pedir autoriza√ß√£o.

Defina todas as cores em public/css/colors.css como vari√°veis CSS:

:root {
  --color-bg-light: #F3F7FC;
  --color-bg-dark: #272A30;
  --color-blue-dark: #000058;
  --color-blue-primary: #1634FF;
  --color-blue-light: #1694FF;
  /* Secund√°rias apenas com autoriza√ß√£o */
  --color-blue-alt: #006AB9;
  --color-yellow: #FCC200;
  --color-green: #15A237;
}


Sempre use essas vari√°veis no restante do CSS.

üìÇ ORGANIZA√á√ÉO DO PROJETO

Mantenha a estrutura de pastas clara e obrigat√≥ria:

/ (raiz do projeto)
  package.json
  README.md
  /api          -> c√≥digo backend (Node/Express)
      index.js
      upload.js
  /public       -> front-end (HTML, CSS, JS est√°tico)
      index.html
      /css
          colors.css
          styles.css
      /js
          parser.js
          metrics.js
          ui.js
          export.js
      /assets
          sample.csv
  /tests        -> testes unit√°rios e fixtures
      parser.test.js
      metrics.test.js


Backend separado de frontend.

CSS modularizado (um arquivo s√≥ para cores).

JS dividido por responsabilidade (parser, m√©tricas, UI, exporta√ß√µes).

üßæ REGRAS GLOBAIS

Atomicidade: modifique apenas 1 arquivo por vez. Se precisar de m√∫ltiplos, explique e proponha a sequ√™ncia de commits.

Mostrar diff: sempre retornar o diff ou arquivo inteiro se for novo.

Testes primeiro: para parser, m√©tricas e ranking.

Valida√ß√£o de dados: checar cabe√ßalho e tipos antes de processar. Linhas inv√°lidas v√£o para errors[].

Documenta√ß√£o clara: comentar c√≥digo, explicar f√≥rmulas e incluir no README.

UI consistente: respeitar paleta de cores e componentes.

Exporta√ß√µes: XLSX com SheetJS, PDF com html2canvas + jsPDF.

Performance: se arquivo > 50k linhas, exibir aviso e sugerir fallback via /api/upload.

Commits: usar Conventional Commits (feat:, fix:, test:).

Organiza√ß√£o m√°xima: tudo modular, comentado, f√°cil de ler.

‚úÖ CRIT√âRIOS DE ACEITE

Upload do sample.csv gera m√©tricas corretas.

Ranking exibido e ordenado por score.

Gr√°ficos usam as cores definidas.

Filtros por per√≠odo e operador funcionam.

Exporta√ß√µes geram arquivos v√°lidos (XLSX e PDF).

README cont√©m instru√ß√µes de instala√ß√£o, uso e testes.

üìå TAREFAS (EXECUTAR EM ORDEM)

TAREFA A ‚Äî Parser CSV/XLSX
Criar public/js/parser.js com fun√ß√£o parseFile(file) que retorna {rows,errors}.

Validar cabe√ßalhos: date,operator,duration_minutes,rating_attendance,rating_solution,pause_minutes.

Normalizar tipos (date ‚Üí ISO string, n√∫meros ‚Üí float, notas vazias ‚Üí null).

Criar tests/parser.test.js com 3 casos de teste.

TAREFA B ‚Äî C√°lculos e Ranking
Criar public/js/metrics.js com fun√ß√µes:

calcMetrics(rows) (gerais)

operatorMetrics(rows) (por operador)

computeScores(opMetrics) (ranking)
F√≥rmula documentada no c√≥digo e README:

score = 0.35*norm(total) + 0.20*(1 - norm(avgDuration))
      + 0.20*norm(avgRatingAttendance)
      + 0.20*norm(avgRatingSolution)
      - 0.05*norm(avgPause)


TAREFA C ‚Äî UI e Gr√°ficos
Editar public/js/ui.js para:

Mostrar m√©tricas gerais

Aplicar filtros

Renderizar gr√°ficos com Chart.js, usando apenas as cores prim√°rias

TAREFA D ‚Äî Exporta√ß√µes
Criar public/js/export.js para exporta√ß√£o:

exportExcel(rows) ‚Üí XLSX (2 abas: raw + summary)

exportPDF() ‚Üí PDF do painel

TAREFA E ‚Äî Backend (opcional)
Criar api/upload.js para processamento server-side de arquivos grandes.

üèÅ RESPOSTAS ESPERADAS DO CURSOR

Mostrar diff do arquivo modificado.

Explicar mudan√ßa em 3-5 linhas.

Indicar como testar localmente.

Se n√£o conseguir em 3 tentativas, parar e pedir orienta√ß√£o.

Sempre que for calcular m√©tricas ou processar dados para o Velodados, siga obrigatoriamente estas regras e nomes de campos:

üìä DADOS ORIGINAIS (REFER√äNCIA)
- **Data** ‚Üí campo `Data`
- **Operador** ‚Üí campo `Nome do Atendente`
- **Tempo de atendimento** ‚Üí campo `Tempo Falado`
- **Avalia√ß√£o do Atendimento** ‚Üí campo `Pergunta2 1 PERGUNTA ATENDENTE`
- **Avalia√ß√£o da Solu√ß√£o** ‚Üí campo `Pergunta2 2 PERGUNTA SOLUCAO`
- **Contagem de Chamadas** ‚Üí campo `Chamada` (considerar SOMENTE as chamadas atendidas)
- **Desconex√£o** ‚Üí campo `Desconex√£o`
- **Tempo Pausa** ‚Üí campo `Dura√ß√£o` (do m√≥dulo A√ß√µes de Operador)
- **Motivo da Pausa** ‚Üí campo `Motivo da Pausa`
- **Data Pausa** ‚Üí campo `Data Inicial`
- **Tempo M√©dio Logado** ‚Üí campo `T M Logado / Dia`
- **Tempo M√©dio Pausado** ‚Üí campo `T M Pausado`

üìà M√âTRICAS DE C√ÅLCULO (SEMPRE USAR)
1. **Total de liga√ß√µes atendidas**  
   - Soma de todas as linhas onde `Chamada` foi atendida.
2. **Tempo m√©dio de atendimento**  
   - M√©dia simples do campo `Tempo Falado`.
3. **Nota m√©dia de atendimento**  
   - M√©dia simples do campo `Pergunta2 1 PERGUNTA ATENDENTE` (ignorar valores nulos ou vazios).
4. **Nota m√©dia de solu√ß√£o**  
   - M√©dia simples do campo `Pergunta2 2 PERGUNTA SOLUCAO` (ignorar valores nulos ou vazios).
5. **Tempo m√©dio logado**  
   - M√©dia simples do campo `T M Logado / Dia`.
6. **Tempo m√©dio pausado**  
   - M√©dia simples do campo `T M Pausado`.
7. **Ranking de operadores**  
   - Deve considerar: 
     - Quantidade de atendimentos (maior √© melhor)
     - Tempo m√©dio de atendimento (menor √© melhor)
     - Nota m√©dia de atendimento (maior √© melhor)
     - Nota m√©dia de solu√ß√£o (maior √© melhor)
     - Tempo m√©dio de pausa (menor √© melhor)
   - F√≥rmula de score recomendada (documentar no c√≥digo):
score = 0.35norm(totalAtendimentos)
+ 0.20(1 - norm(tempoMedioAtendimento))
+ 0.20norm(notaAtendimento)
+ 0.20norm(notaSolucao)
- 0.05*norm(tempoPausa)

markdown
Copiar c√≥digo
   - Onde `norm()` √© normaliza√ß√£o min-max dentro do conjunto filtrado.

üîé FILTROS E AGRUPAMENTOS
- Sempre permitir filtros por:
  - Per√≠odo (Ontem, Semana [seg-s√°b], M√™s, Ano)
  - Operador espec√≠fico
- Para gr√°ficos:
  - Agrupar por data (YYYY-MM-DD) para atendimentos/dia
  - Criar histograma de notas (0 a 5) para distribui√ß√£o

‚ö†Ô∏è REGRAS DE QUALIDADE
- Sempre tratar linhas com dados incompletos para que n√£o quebrem o c√°lculo.
- Documentar no c√≥digo quando uma linha √© descartada por estar inv√°lida.
- Garantir que m√©tricas e rankings sejam recalculados ap√≥s aplicar filtros.

üìå IMPORTANTE
Essas regras devem ser seguidas para **todos os c√°lculos e m√©tricas** que o projeto fizer, sem exce√ß√£o.

---
